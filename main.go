// Package dataer adds a metadata type to another type.
package main

import (
	"errors"
	"fmt"
	"os"
	"strings"
	"unicode"

	"golang.org/x/tools/go/packages"
	"lesiw.io/flag"
)

var (
	flags = flag.NewSet(os.Stderr, "dataer -t TYPE -d DATA")
	ttype = flags.String("t,type", "type to make a dataer")
	dtype = flags.String("d,data", "data to add to type")

	errParse = errors.New("parse error")
)

const code = `// Code generated by lesiw.io/dataer. DO NOT EDIT.

package %[1]s

import (
	"runtime"
	"unsafe"
)

var _%[2]s = make(map[uintptr]*%[3]s)

func (t *%[2]s) Data() *%[3]s {
	ptr := uintptr(unsafe.Pointer(t))
	if _, ok := _%[2]s[ptr]; !ok {
		_%[2]s[ptr] = new(%[3]s)
		runtime.SetFinalizer(t, func(_ *%[2]s) { delete(_%[2]s, ptr) })
	}
	return _%[2]s[ptr]
}
`

func main() {
	if err := run(); err != nil {
		if err != errParse {
			fmt.Fprintln(os.Stderr, err)
		}
		os.Exit(1)
	}
}

func run() error {
	if err := flags.Parse(os.Args[1:]...); err != nil {
		return errParse
	}
	pkgs, err := packages.Load(&packages.Config{Mode: packages.NeedName})
	if err != nil {
		return fmt.Errorf("failed to determine package name: %w", err)
	}
	pkg := "main"
	if len(pkgs) > 0 {
		pkg = pkgs[0].Name
	}
	err = os.WriteFile(filename(*ttype)+".go",
		[]byte(fmt.Sprintf(code, pkg, *ttype, *dtype)), 0644)
	if err != nil {
		return fmt.Errorf("failed to generate %s: %w", *ttype+".go", err)
	}
	return nil
}

func filename(s string) string {
	var result strings.Builder
	for i, r := range s {
		if unicode.IsUpper(r) {
			if i > 0 {
				result.WriteByte('_')
			}
			result.WriteRune(unicode.ToLower(r))
		} else {
			result.WriteRune(r)
		}
	}
	return result.String()
}
